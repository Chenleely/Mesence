// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum RequestStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case accepted // = 0
  case refused // = 1
  case waiting // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .accepted
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .accepted
    case 1: self = .refused
    case 2: self = .waiting
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .accepted: return 0
    case .refused: return 1
    case .waiting: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension RequestStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [RequestStatus] = [
    .accepted,
    .refused,
    .waiting,
  ]
}

#endif  // swift(>=4.2)

enum TypeEnum: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case word // = 0
  case online // = 1
  case offline // = 2
  case friendRequest // = 3
  case heartPackage // = 4
  case offer // = 5
  case answer // = 6
  case candidate // = 7
  case UNRECOGNIZED(Int)

  init() {
    self = .word
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .word
    case 1: self = .online
    case 2: self = .offline
    case 3: self = .friendRequest
    case 4: self = .heartPackage
    case 5: self = .offer
    case 6: self = .answer
    case 7: self = .candidate
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .word: return 0
    case .online: return 1
    case .offline: return 2
    case .friendRequest: return 3
    case .heartPackage: return 4
    case .offer: return 5
    case .answer: return 6
    case .candidate: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [TypeEnum] = [
    .word,
    .online,
    .offline,
    .friendRequest,
    .heartPackage,
    .offer,
    .answer,
    .candidate,
  ]
}

#endif  // swift(>=4.2)

struct Msg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: TypeEnum = .word

  var data: DataMessage {
    get {return _data ?? DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: DataMessage? = nil
    
  init(type: TypeEnum, data: DataMessage) {
      self.type = type
      self._data = data
  }
}

struct DataMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var to: String = String()

  var from: String = String()

  var content: String = String()

  var sendTime: String = String()

  var onlineUsers: [String] = []

  var offlineUsers: [String] = []

  var candidate: String = String()

  var requestStatus: RequestStatus = .accepted

  var unknownFields = SwiftProtobuf.UnknownStorage()
     
  mutating func setRequestStatus(status: RequestStatus) {
      self.requestStatus = status
  }

  init() {}
    
  init(toUser to: String, fromUser from: String, dataContent content: String, sendMsgTime sendTime: String) {
        self.to = to
        self.from = from
        self.content = content
        self.sendTime = sendTime
  }
}

#if swift(>=5.5) && canImport(_Concurrency)
extension RequestStatus: @unchecked Sendable {}
extension TypeEnum: @unchecked Sendable {}
extension Msg: @unchecked Sendable {}
extension DataMessage: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RequestStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Accepted"),
    1: .same(proto: "Refused"),
    2: .same(proto: "Waiting"),
  ]
}

extension TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Word"),
    1: .same(proto: "Online"),
    2: .same(proto: "Offline"),
    3: .same(proto: "FriendRequest"),
    4: .same(proto: "HeartPackage"),
    5: .same(proto: "Offer"),
    6: .same(proto: "Answer"),
    7: .same(proto: "Candidate"),
  ]
}

extension Msg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Msg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Type"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.type != .word {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Msg, rhs: Msg) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "to"),
    2: .same(proto: "from"),
    3: .same(proto: "content"),
    4: .same(proto: "sendTime"),
    5: .same(proto: "onlineUsers"),
    6: .same(proto: "offlineUsers"),
    7: .same(proto: "candidate"),
    8: .same(proto: "requestStatus"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sendTime) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.onlineUsers) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.offlineUsers) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.candidate) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.requestStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 1)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 3)
    }
    if !self.sendTime.isEmpty {
      try visitor.visitSingularStringField(value: self.sendTime, fieldNumber: 4)
    }
    if !self.onlineUsers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.onlineUsers, fieldNumber: 5)
    }
    if !self.offlineUsers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.offlineUsers, fieldNumber: 6)
    }
    if !self.candidate.isEmpty {
      try visitor.visitSingularStringField(value: self.candidate, fieldNumber: 7)
    }
    if self.requestStatus != .accepted {
      try visitor.visitSingularEnumField(value: self.requestStatus, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DataMessage, rhs: DataMessage) -> Bool {
    if lhs.to != rhs.to {return false}
    if lhs.from != rhs.from {return false}
    if lhs.content != rhs.content {return false}
    if lhs.sendTime != rhs.sendTime {return false}
    if lhs.onlineUsers != rhs.onlineUsers {return false}
    if lhs.offlineUsers != rhs.offlineUsers {return false}
    if lhs.candidate != rhs.candidate {return false}
    if lhs.requestStatus != rhs.requestStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
